// 国際化（i18n）サポート
export type Language = 'en' | 'ja'

export const translations = {
  en: {
    title: 'Bubblegum NFT Bulk Creation Demo',
    walletSelection: 'Wallet Selection',
    externalWallet: 'External Wallet (Phantom, etc.)',
    localWallet: 'Local Wallet (CLI)',
    externalWalletNote: 'External wallets will show confirmation dialogs for each NFT',
    localWalletNotReady: 'Please load your Solana CLI keypair first',
    localWalletReady: 'Local wallet ready',
    noConfirmationDialogs: 'No confirmation dialogs for bulk minting',
    loadCliKeypair: 'Load Solana CLI Keypair',
    cliKeypairLocation: 'Standard location: ~/.config/solana/id.json',
    cliKeypairCommand: 'Command: `solana config get` to verify',
    nftCreationSettings: 'NFT Creation Settings',
    nftNamePrefix: 'NFT Name Prefix',
    nftNameExample: 'will become {prefix}000001, {prefix}000002...',
    quantity: 'Quantity',
    minConfirmations: 'Min confirmations',
    greyedOutReason: 'Large quantities not recommended for external wallets',
    createNfts: 'Create {quantity} NFTs',
    processing: 'Processing...',
    progress: 'Progress',
    sequentialProcessing: 'Sequential processing with optimized sending',
    creationResults: 'Creation Results',
    totalCost: 'Total Cost',
    merkleTree: 'Merkle Tree',
    collection: 'Collection',
    verify: 'Verify',
    verifying: 'Verifying...',
    nftVerificationResults: 'NFT Verification Results',
    nftsFound: '{count} NFTs found',
    noNftsFound: 'No NFTs found.',
    checkpoints: 'Please check the following:',
    indexingDelay: 'NFTs may take time to index after creation',
    waitAndRetry: 'Please wait a few minutes and try again',
    checkConsole: 'Check browser developer tools console for logs',
    walletAddress: 'Wallet Address',
    balance: 'Balance',
    loadingWallet: 'Loading wallet...',
    loadingFailed: 'Failed to load wallet',
    walletLoaded: 'Solana CLI wallet loaded successfully!',
    address: 'Address',
    createTreeWarning: 'Creating {quantity} NFTs will take approximately {minutes} minutes',
    continueAnyway: 'Continue anyway',
    cancel: 'Cancel',
    stopMinting: 'Stop Minting',
    mintingStopped: 'Minting stopped by user',
    error: 'Error',
    switchLanguage: 'Switch to Japanese',
  },
  ja: {
    title: 'Bubblegum NFT 大量作成デモ',
    walletSelection: 'ウォレット選択',
    externalWallet: '外部ウォレット (Phantom等)',
    localWallet: 'ローカルウォレット (CLI)',
    externalWalletNote: '外部ウォレットでは各NFTごとに確認ダイアログが表示されます',
    localWalletNotReady: 'Solana CLIキーペアを最初に読み込んでください',
    localWalletReady: 'ローカルウォレット準備完了',
    noConfirmationDialogs: '確認ダイアログなしで一括ミントが可能です',
    loadCliKeypair: 'Solana CLIキーペアを読み込み',
    cliKeypairLocation: '通常の場所: ~/.config/solana/id.json',
    cliKeypairCommand: 'コマンド: `solana config get` で確認可能',
    nftCreationSettings: 'NFT作成設定',
    nftNamePrefix: 'NFT名のプレフィックス',
    nftNameExample: '{prefix}000001, {prefix}000002... のような名前になります',
    quantity: '作成数量',
    minConfirmations: '確認最小限',
    greyedOutReason: '外部ウォレットでは大量作成は推奨されません',
    createNfts: '{quantity}個のNFTを作成',
    processing: '処理中...',
    progress: '進捗',
    sequentialProcessing: '最適化された送信でシーケンシャル処理中',
    creationResults: '作成結果',
    totalCost: '合計コスト',
    merkleTree: 'Merkle Tree',
    collection: 'コレクション',
    verify: '確認をする',
    verifying: '確認中...',
    nftVerificationResults: 'NFT確認結果',
    nftsFound: '{count}個のNFTが見つかりました',
    noNftsFound: 'NFTが見つかりませんでした。',
    checkpoints: '以下の点をご確認ください：',
    indexingDelay: 'NFTの作成直後は、インデックスに時間がかかる場合があります',
    waitAndRetry: '数分待ってから再度確認してください',
    checkConsole: 'ブラウザの開発者ツールでコンソールログを確認してください',
    walletAddress: 'ウォレットアドレス',
    balance: '残高',
    loadingWallet: 'ウォレット読み込み中...',
    loadingFailed: 'ウォレットの読み込みに失敗しました',
    walletLoaded: 'Solana CLIウォレットを読み込みました！',
    address: 'アドレス',
    createTreeWarning: '{quantity}個のNFT作成には約{minutes}分かかります',
    continueAnyway: 'それでも続行',
    cancel: 'キャンセル',
    stopMinting: 'ミント停止',
    mintingStopped: 'ユーザーによってミントが停止されました',
    error: 'エラー',
    switchLanguage: '日本語に切り替え',
  }
}

export function useTranslation(language: Language) {
  return translations[language]
}

export function formatMessage(template: string, params: Record<string, string | number>): string {
  return template.replace(/\{(\w+)\}/g, (match, key) => {
    return params[key]?.toString() || match
  })
}